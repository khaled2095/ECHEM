"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LarasocketConnector = void 0;
var channel_1 = require("../channel");
var connector_1 = require("./connector");
var util_1 = require("../util");
/**
 * This class creates a connector to a Socket.io server.
 */
var LarasocketConnector = /** @class */ (function (_super) {
    __extends(LarasocketConnector, _super);
    function LarasocketConnector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * All of the subscribed channel names.
         */
        _this.channels = {};
        return _this;
    }
    /**
     * Create a fresh Socket.io connection.
     */
    LarasocketConnector.prototype.connect = function () {
        this.websocket = new util_1.LarasocketManager(this.options);
    };
    /**
     * Listen for an event on a channel instance.
     */
    LarasocketConnector.prototype.listen = function (name, event, callback) {
        return this.channel(name).listen(event, callback);
    };
    /**
     * Get a channel instance by name.
     */
    LarasocketConnector.prototype.channel = function (name) {
        if (!this.channels[name]) {
            this.channels[name] = new channel_1.LarasocketChannel(this.websocket, name, this.options);
        }
        return this.channels[name];
    };
    /**
     * Get a private channel instance by name.
     */
    LarasocketConnector.prototype.privateChannel = function (name) {
        if (!this.channels['private-' + name]) {
            this.channels['private-' + name] = new channel_1.LarasocketPrivateChannel(this.websocket, 'private-' + name, this.options);
        }
        return this.channels['private-' + name];
    };
    /**
     * Get a presence channel instance by name.
     */
    LarasocketConnector.prototype.presenceChannel = function (name) {
        if (!this.channels['presence-' + name]) {
            this.channels['presence-' + name] = new channel_1.LarasocketPresenceChannel(this.websocket, 'presence-' + name, this.options);
        }
        return this.channels['presence-' + name];
    };
    /**
     * Leave the given channel, as well as its private and presence variants.
     */
    LarasocketConnector.prototype.leave = function (name) {
        var _this = this;
        var channels = [name, 'private-' + name, 'presence-' + name];
        channels.forEach(function (_name) {
            _this.leaveChannel(_name);
        });
    };
    /**
     * Leave the given channel.
     */
    LarasocketConnector.prototype.leaveChannel = function (name) {
        if (this.channels[name]) {
            this.channels[name].unsubscribe();
            delete this.channels[name];
        }
    };
    /**
     * Get the socket ID for the connection.
     */
    LarasocketConnector.prototype.socketId = function () {
        return this.websocket.socketId();
    };
    /**
     * Disconnect Socketio connection.
     */
    LarasocketConnector.prototype.disconnect = function () {
        this.websocket.disconnect();
    };
    return LarasocketConnector;
}(connector_1.Connector));
exports.LarasocketConnector = LarasocketConnector;
