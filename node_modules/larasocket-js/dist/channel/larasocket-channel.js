"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LarasocketChannel = void 0;
/**
 * This class represents a Socket.io channel.
 */
var channel_1 = require("./channel");
var util_1 = require("../util");
var LarasocketChannel = /** @class */ (function (_super) {
    __extends(LarasocketChannel, _super);
    /**
     * Create a new class instance.
     */
    function LarasocketChannel(socket, name, options) {
        var _this = _super.call(this) || this;
        /**
         * The event callbacks applied to the channel.
         */
        _this.events = {};
        _this.eventFormatter = new util_1.EventFormatter(options.namespace);
        _this.name = name;
        _this.socket = socket;
        _this.options = options;
        _this.subscribe();
        return _this;
    }
    /**
     * Subscribe to a Socket.io channel.
     */
    LarasocketChannel.prototype.subscribe = function () {
        this.socket.subscribe(this);
    };
    /**
     * Unsubscribe from channel and ubind event callbacks.
     */
    LarasocketChannel.prototype.unsubscribe = function () {
        this.unbind();
        this.socket.unsubscribe(this);
    };
    /**
     * Listen for an event on the channel instance.
     */
    LarasocketChannel.prototype.listen = function (event, callback) {
        this.on(event, callback);
        return this;
    };
    /**
     * Stop listening for an event on the channel instance.
     */
    LarasocketChannel.prototype.stopListening = function (event) {
        var name = this.eventFormatter.format(event);
        this.socket.removeListener(name);
        delete this.events[name];
        return this;
    };
    /**
     * Bind the channel's socket to an event and store the callback.
     */
    LarasocketChannel.prototype.on = function (event, callback) {
        this.socket.on(event, callback);
        this.bind(event, callback);
    };
    /**
     * Bind the channel's socket to an event and store the callback.
     */
    LarasocketChannel.prototype.bind = function (event, callback) {
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };
    /**
     * Unbind the channel's socket from all stored event callbacks.
     */
    LarasocketChannel.prototype.unbind = function () {
        var _this = this;
        Object.keys(this.events).forEach(function (event) {
            _this.socket.removeListener(event);
            delete _this.events[event];
        });
    };
    return LarasocketChannel;
}(channel_1.Channel));
exports.LarasocketChannel = LarasocketChannel;
