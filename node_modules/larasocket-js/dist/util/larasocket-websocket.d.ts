/// <reference types="node" />
import { LarasocketChannel } from '../channel';
import { IncomingMessage } from './incoming-message';
import { OutgoingMessage } from './outgoing-message';
/**
 * Event name formatter
 */
export declare class LarasocketWebsocket {
    /**
     *
     */
    protected uuid: string;
    /**
     *
     */
    protected token: string;
    /**
     *
     */
    protected timeout: number;
    /**
     *
     */
    protected currentTimeout?: NodeJS.Timeout;
    /**
     *
     */
    protected csrf?: string;
    /**
     *
     */
    protected options: any;
    /**
     *
     */
    protected websocketUrl: string;
    /**
     *
     */
    protected websocketInstance?: WebSocket;
    /**
     *
     */
    protected websocketInitializationPromise?: Promise<WebSocket>;
    /**
     *
     */
    protected onMessageListener: (data: IncomingMessage) => void;
    /**
     *
     */
    protected reconnectListener: (socket: LarasocketWebsocket) => void;
    /**
     *
     */
    connectionId: string;
    /**
     * Create a new class instance.
     */
    constructor(options: any, onMessageListener: (data: IncomingMessage) => void, onReconnectListener: (socket: LarasocketWebsocket) => void);
    /**
     *
     */
    close(): void;
    /**
     * Send string data over the websocket connection.
     *
     * @param message
     */
    send(message: OutgoingMessage): void;
    /**
     *
     * @param channel
     */
    getAuthNetworkPromise(channel: LarasocketChannel): Promise<any>;
    /**
     * Return a promise that will resolve the websocket instance.
     */
    protected getWebsocketInstance(): Promise<WebSocket>;
    /**
     * The connection is ready.
     */
    protected websocketInstanceReady(socket: WebSocket): void;
    /**
     * Reset and connect to the websocket.
     */
    protected reconnect(): Promise<WebSocket>;
    /**
     * Initialize an websocket connection.
     */
    protected connect(): Promise<WebSocket>;
    /**
     * Websocket on open event.
     *
     * @param socket
     * @param event
     */
    private onOpen;
    /**
     * Websocket on close event. Larasocket will attempt to reconnect.
     *
     * @param event
     */
    private onClose;
    /**
     * Websocket on error event. Larasocket will close the connection and reconnect.
     *
     * @param event
     */
    private onError;
    /**
     * Websocket on message event. Routed to the listener after the websocket connection can be linked to Larasocket backend.
     *
     * @param socket
     * @param resolve
     * @param reject
     * @param event
     */
    private onMessage;
    /**
     * Gets the next timeout in milliseconds before the websocket connection should reconnect.
     */
    private getTimeout;
    /**
     * Used to link a socket connection to a db connection.
     */
    private uuidv4;
}
