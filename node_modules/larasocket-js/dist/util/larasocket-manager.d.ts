import { LarasocketChannel } from '../channel';
import { EventFormatter } from './event-formatter';
import { IncomingMessage } from './incoming-message';
import { OutgoingMessage, OutgoingMessageType } from './outgoing-message';
import { LarasocketWebsocket } from './larasocket-websocket';
/**
 * Event name formatter
 */
export declare class LarasocketManager {
    /**
     *
     */
    protected options: any;
    /**
     *
     */
    protected websocketInstance: LarasocketWebsocket;
    /**
     *
     */
    protected subscribedChannels: {
        [key: string]: LarasocketChannel;
    };
    /**
     *
     */
    protected listeners: {
        [key: string]: (message: IncomingMessage) => void;
    };
    /**
     * The event formatter.
     */
    protected eventFormatter: EventFormatter;
    /**
     * Create a new class instance.
     */
    constructor(options: any);
    /**
     *
     */
    disconnect(): void;
    /**
     * Triggers subscription to each previously subscribed channel.
     */
    reconnect(): void;
    /**
     * Subscribe to a given channel.
     *
     * @param channel
     */
    subscribe(channel: LarasocketChannel): void;
    /**
     * Unsubscribe to a given channel.
     *
     * @param channel
     */
    unsubscribe(channel: LarasocketChannel): void;
    /**
     * Tie an event listener to an action.
     *
     * @param name
     * @param listener
     */
    on(name: string, listener: (message: IncomingMessage) => void): void;
    /**
     * Tie an event listener to an action.
     *
     * @param name
     */
    removeListener(name: string): void;
    /**
     *
     * @param type
     */
    getSocketMessage(type: OutgoingMessageType): OutgoingMessage;
    /**
     *
     * @param message
     */
    send(message: OutgoingMessage): void;
    /**
     *
     */
    socketId(): string;
    /**
     * Routes an incoming massage for processing.
     *
     * @param message
     */
    protected route(message: IncomingMessage): void;
    /**
     * Authenticate a channel subscription.
     *
     * @param channel
     */
    protected authenticate(channel: LarasocketChannel): Promise<any>;
}
